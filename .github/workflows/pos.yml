name: pos
on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: Name of the environment
        required: true
        type: choice
        options:
          - internal
          - qa
          - uatv2
          - stage
      dbEnvironment:
        description: Db Environment Name
        required: true
        type: choice
        options:
          - internal-v2
          - main-v2
          - uatv3

permissions:
   id-token: write   # This is required for requesting the JWT through OIDC
   contents: write    # This is required for actions/checkout
jobs:
  build:
    runs-on: ubuntu-latest
    environment: main
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: role
          aws-region: us-east-2
      - name: Get POS APK
        run: aws s3 cp s3://..../${{ inputs.environment_name }}/app-${{ inputs.environment_name }}-release.apk src/test/java/resources/app-${{ inputs.environment_name }}-release.apk
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      - name: Install gmsaas
        run: |
          pip3 install gmsaas
          gmsaas config set android-sdk-path $ANDROID_HOME
          gmsaas auth token ${{ secrets.GENY_AUTH }}
      - name: Set Variable Based on Choice
        run: |
          if [ "${{ github.event.inputs.environment_name }}" == "internal" ]; then
            echo "tenant=tenant_44" >> $GITHUB_ENV
            echo "restaurantId=43" >> $GITHUB_ENV
            echo "pin=910592" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment_name }}" == "qa" ]; then
            echo "tenant1=tenant_199" >> $GITHUB_ENV
            echo "restaurantId1=232" >> $GITHUB_ENV
            echo "managerPin1=552804" >> $GITHUB_ENV
            echo "serverPin1=394942" >> $GITHUB_ENV
            echo "deviceId1=11111111111" >> $GITHUB_ENV
            echo "tenant2=tenant_201" >> $GITHUB_ENV
            echo "restaurantId2=237" >> $GITHUB_ENV
            echo "managerPin2=366266" >> $GITHUB_ENV
            echo "serverPin2=304189" >> $GITHUB_ENV
            echo "deviceId2=12345678" >> $GITHUB_ENV
            echo "url"="url" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment_name }}" == "uatv2" ]; then
            echo "tenant1=tenant_535" >> $GITHUB_ENV
            echo "restaurantId1=504" >> $GITHUB_ENV
            echo "managerPin1=326443" >> $GITHUB_ENV
            echo "serverPin1=969409" >> $GITHUB_ENV
            echo "deviceId1=111111" >> $GITHUB_ENV
            echo "tenant2=tenant_538" >> $GITHUB_ENV
            echo "restaurantId2=509" >> $GITHUB_ENV
            echo "managerPin2=345400" >> $GITHUB_ENV
            echo "serverPin2=306564" >> $GITHUB_ENV
            echo "deviceId2=1111" >> $GITHUB_ENV
            echo "url=https://${{ inputs.environment_name }}-url" >> $GITHUB_ENV
          fi
      - name: Install and Run Appium Server
        run: |
          chmod +x ./scripts/startAppiumServers.sh 
          ./scripts/startAppiumServers.sh
      - name: Login Manager1
        run: |
          response=$(curl -X 'POST' \
          '${{ env.url }}/api/authentication/login-with-pos?deviceId=${{ env.deviceId1 }}&logoutNeeded=true' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d '{
          "restaurantId": ${{ env.restaurantId1 }},
          "posPin": ${{ env.managerPin1 }} }')
          echo "API response: $response"
          access_token=$(echo $response | jq -r '.data.authChallengeResponse.AuthenticationResult.AccessToken')
          id_token=$(echo $response | jq -r '.data.authChallengeResponse.AuthenticationResult.IdToken')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV
          echo "ID_TOKEN=$id_token" >> $GITHUB_ENV
      - name: Clockin Manager1
        run: |
          curl -X POST "${{ env.url }}/api/employee/timeLog/clock-in" \
          -H "accept: application/json" \
          -H "x-id-token: $ID_TOKEN" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"roleId": 5}'
      - name: Logout Manager1
        run: |
          curl -X POST "${{ env.url }}/api/authentication/logout" \
          -H "accept: application/json" \
          -H "x-id-token: $ID_TOKEN" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json"
      - name: Login Manager2
        run: |
          response=$(curl -X 'POST' \
          '${{ env.url }}/api/authentication/login-with-pos?deviceId=${{ env.deviceId2 }}&logoutNeeded=true' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d '{
          "restaurantId": ${{ env.restaurantId2 }},
          "posPin": ${{ env.managerPin2 }} }')
          echo "API response: $response"
          access_token=$(echo $response | jq -r '.data.authChallengeResponse.AuthenticationResult.AccessToken')
          id_token=$(echo $response | jq -r '.data.authChallengeResponse.AuthenticationResult.IdToken')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV
          echo "ID_TOKEN=$id_token" >> $GITHUB_ENV
      - name: Clockin Manager2
        run: |
          curl -X POST "${{ env.url }}/api/employee/timeLog/clock-in" \
          -H "accept: application/json" \
          -H "x-id-token: $ID_TOKEN" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"roleId": 5}'
      - name: Logout Manager2
        run: |
          curl -X POST "${{ env.url }}/api/authentication/logout" \
          -H "accept: application/json" \
          -H "x-id-token: $ID_TOKEN" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json"
      - name: Login Server1
        run: |
          response=$(curl -X 'POST' \
          '${{ env.url }}/api/authentication/login-with-pos?deviceId=${{ env.deviceId1 }}&logoutNeeded=true' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d '{
          "restaurantId": ${{ env.restaurantId1 }},
          "posPin": ${{ env.serverPin1 }} }')
          echo "API response: $response"
          access_token=$(echo $response | jq -r '.data.authChallengeResponse.AuthenticationResult.AccessToken')
          id_token=$(echo $response | jq -r '.data.authChallengeResponse.AuthenticationResult.IdToken')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV
          echo "ID_TOKEN=$id_token" >> $GITHUB_ENV
      - name: Clockin Server1
        run: |
          curl -X POST "${{ env.url }}/api/employee/timeLog/clock-in" \
          -H "accept: application/json" \
          -H "x-id-token: $ID_TOKEN" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"roleId": 6}'
      - name: Logout Server1
        run: |
          curl -X POST "${{ env.url }}/api/authentication/logout" \
          -H "accept: application/json" \
          -H "x-id-token: $ID_TOKEN" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json"
      - name: Login Server2
        run: |
          response=$(curl -X 'POST' \
          '${{ env.url }}/api/authentication/login-with-pos?deviceId=${{ env.deviceId2 }}&logoutNeeded=true' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d '{
          "restaurantId": ${{ env.restaurantId2 }},
          "posPin": ${{ env.serverPin2 }} }')
          echo "API response: $response"
          access_token=$(echo $response | jq -r '.data.authChallengeResponse.AuthenticationResult.AccessToken')
          id_token=$(echo $response | jq -r '.data.authChallengeResponse.AuthenticationResult.IdToken')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV
          echo "ID_TOKEN=$id_token" >> $GITHUB_ENV
      - name: Clockin Server2
        run: |
          curl -X POST "${{ env.url }}/api/employee/timeLog/clock-in" \
          -H "accept: application/json" \
          -H "x-id-token: $ID_TOKEN" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"roleId": 6}'
      - name: Logout Server2
        run: |
          curl -X POST "${{ env.url }}/api/authentication/logout" \
          -H "accept: application/json" \
          -H "x-id-token: $ID_TOKEN" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json"
      - name: Connecting to POS Instance1
        id: start-instance1
        run: |
          chmod +x ./scripts/startInstances.sh 
          ./scripts/startInstances.sh f2d2a4e3-c6ad-4316-a177-c6f021d360f8 POS1 10000 gmsaas1.log
      - name: Connecting to POS Instance2
        id: start-instance2
        run: |
          chmod +x ./scripts/startInstances.sh 
          ./scripts/startInstances.sh 7645f7fc-ad1b-4ea2-9364-494f711d14a2 POS2 20000 gmsaas2.log
      - name: OnBoard POS Device1
        if: always()
        run: mvn -e test -DxmlFilePath=test-suites/onBoard.xml -Dudid=localhost:10000 -DappEnvironment=${{ inputs.environment_name }} -DdbEnvironment=${{ inputs.dbEnvironment }} -Durl=${{ secrets.dbUrl }} -Dusername=username -Dpassword=password -Dtenant=${{ env.tenant1 }} -DrestaurantId=${{ env.restaurantId1 }} -DdeviceType=pos
      - name: OnBoard POS Device2
        if: always()
        run: mvn -e test -DxmlFilePath=test-suites/onBoard.xml -Dudid=localhost:20000 -DappEnvironment=${{ inputs.environment_name }} -DdbEnvironment=${{ inputs.dbEnvironment }} -Durl=${{ secrets.dbUrl }} -Dusername=username -Dpassword=password -Dtenant=${{ env.tenant2 }} -DrestaurantId=${{ env.restaurantId2 }} -DdeviceType=pos
      - name: Start Device1 logcat
        if: always()
        run: ./scripts/logcat_capture.sh start logcat1.txt localhost:10000
      - name: Start Device2 logcat
        if: always()
        run: ./scripts/logcat_capture.sh start logcat2.txt localhost:20000
      - name: Run POS Smoke Tests
        if: always()
        run: mvn -e test -DxmlFilePath=test-suites/pos_smoke.xml -Denvironment=${{ inputs.environment_name }} -Dudid1=localhost:10000 -DmanagerPin1=${{ env.managerPin1 }} -DserverPin1=${{ env.serverPin1 }} -DappiumPort1=4723 -DsystemPort1=8300 -Dudid2=localhost:20000 -DmanagerPin2=${{ env.managerPin2 }} -DserverPin2=${{ env.serverPin2 }} -DappiumPort2=4725 -DsystemPort2=8400 -Dfrom=${{ vars.EMAIL_FROM }} -Dpassword=${{ vars.PASSWORD }} -Dto=${{ vars.EMAIL_TO }}
      - name: Stop Device 1 logcat
        if: always()
        run: ./scripts/logcat_capture.sh stop localhost:10000
      - name: Stop Device 2 logcat
        if: always()
        run: ./scripts/logcat_capture.sh stop localhost:20000
      - name: Stop Instance 2
        if: always()
        run: gmsaas instances stop ${{ steps.start-instance2.outputs.instance_id }}  
      - name: Configure AWS Credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: role
          aws-region: us-east-2
      - name: Upload Smoke Tests Report to S3
        if: always()
        run: |
          file=$(ls reports/*.html)
          echo "Found report file: $file"
          aws s3 cp $file s3://path/reports/
      - name: Upload Smoke Tests Recording to S3
        if: always()
        run: |
          file=$(ls videos/*.zip)
          echo "Found report file: $file"
          aws s3 cp $file s3://path/testrecording/
      - name: Upload Smoke Recording as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: recording_smoke
          path: videos/*.zip
      - name: Upload Smoke Report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report_smoke
          path: reports/*.html
      - name: Upload Device 1 logcat log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logcat-log1
          path: logcat1.txt
      - name: Upload Device 2 logcat log
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: logcat-log2
            path: logcat2.txt
      - name: Delete report File
        if: always()
        run: rm reports/*.html
      - name: Delete recording file
        if: always()
        run: rm videos/*
